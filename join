#! /usr/bin/env python3

#The incantation for making a Python script executable under WinNT is to give the file an extension of .cmd and add the following as the first line:

#@setlocal enableextensions & python -x %~f0 %* & goto :EOF
#cmd shebang needs quotes for "%~f0"

from sys import (argv, stdout)
import csv
from collections import (namedtuple, defaultdict)
from xml.sax import saxutils
from tkinter.tix import Tk
from tkinter.ttk import (Button, Entry, Frame, Label, LabelFrame,
    Checkbutton)
import tkinter
from functools import partial
from tkinter import (StringVar, DoubleVar, Toplevel)
from tkinter.tix import FileEntry
from lib.tk import Form

def main():
    FREQ_DEFAULT = "GoldfieldsBrgnlEVCSppFreq.xls.csv"
    CA_DEFAULT = "PLANT_CA.TXT"
    
    help = False
    grid = 0o000
    area = []
    plants = []
    freq_thold = 0.3
    ca_file = None
    freq_file = None
    evcs = []
    quads = []
    
    i = iter(argv)
    next(i)
    while True:
        try:
            arg = next(i)
        except StopIteration:
            break
        
        lower = arg.lower()
        if lower in {"help", "-h", "--help", "-?", "?"}:
            help = True
        elif lower == "grid":
            grid |= int(next(i), 8)
        elif lower == "area":
            area.extend(next(i))
        elif lower == "ca":
            ca_file = next(i)
        elif lower == "freqs":
            freq_file = next(i)
        elif lower == "evc":
            evcs.append(next(i))
        elif lower == "quad":
            quads.append(next(i))
        elif lower == "thold":
            freq_thold = float(next(i))
        else:
            raise SystemExit('''\
Bad command line argument: {}
Try "{} help"'''.format(arg, argv[0]))
    
    if help:
        print("""\
join ca ... [area ...] [freqs ... evc ...] [quad ...] [options] > output.html
\tIncludes only those plants selected by the "area", "evc" and "quad"
\toptions. Ignores plants with * and + origin, and ferns, orchids and
\tmistletoes.
join freqs ...
\tLists EVCs found

Options:
ca <{CA_DEFAULT}>
\tCastlemaine plant list CSV file. Produce combined list based off this.
freqs <{FREQ_DEFAULT}>
\tEVC frequency plant list CSV file
grid <octal code>
\tOctal (binary) mask code of 10-minute grid references to highlight. The
\tmatching grid code(s) are indicated in the list, but this does not
\taffect whether a plant is selected in the list. A single grid code
\thighlights plants in the corresponding grid area, independent of whether
\tthey are also in any other grid areas. Multiple grid options means to
\thighlight which of the provided grids a plants is from. 
area <alphanumeric sequence>
\tCastlemaine plant list area codes to include. More than one may be
\tspecified as a string of codes or multiple options. The order does not
\tmatter. The matching codes are indicated in the list.
evc <name or number>
\tInclude plants whose relative frequencies in EVC exceed threshold. Use
\t"freqs" option alone to list EVCs. If the EVC does not exist (or is
\tspelt wrong), the only indication is the corresponding output column is
\tnot populated.
quad <Viridans CSV file>
\tInclude plants from Viridans quadrat. The "systematic format" is
\tprobably better than the alphabetical because some types of plants are
\tthen easily identified by the program and ignored.
thold <threshold>
\tEVC frequency threshold (default: {freq_thold})
help\tDisplay this help""".format(**locals()))
        return
    
    if freq_file is not None and not evcs:
        list_evcs(freq_file)
        return
    
    if ca_file is None and freq_file is None and not quads:
        root = Tk()
        root.title("Reveg DB")
        
        frame = LabelFrame(root, text="Castlemaine plant list")
        frame.grid(columnspan=2, sticky=tkinter.EW)
        form = Form(frame)
        ca_file = add_file(form, CA_DEFAULT, text="Source file")
        
        grid = StringVar(value="{:03o}".format(grid))
        field = Frame(frame)
        Entry(field, textvariable=grid).pack(
            side=tkinter.LEFT, expand=True, fill=tkinter.X)
        grid_button = partial(grid_menu, grid, field)
        grid_button = Button(field, text="Menu . . .", command=grid_button)
        grid_button.pack(side=tkinter.LEFT)
        form.add_field(field, text="Highlight grid sections")
        
        form.add_field(Entry(frame), text="Select areas")
        
        frame = LabelFrame(root, text="EVC frequencies")
        frame.grid(columnspan=2, sticky=tkinter.EW)
        form = Form(frame)
        freq_file = add_file(form, FREQ_DEFAULT, text="Source file")
        form.add_field(Label(frame, text="(EVCs name, number)"), text="Select EVCs")
        freq_thold = DoubleVar(value=freq_thold)
        form.add_field(Entry(frame, textvariable=freq_thold),
            text="Frequency threshold")
        
        frame = LabelFrame(root, text="Viridans quadrats")
        frame.grid(columnspan=2, sticky=tkinter.EW)
        form = Form(frame)
        form.add_field(Label(frame, text="(quadrats file, name)"), text="Select Viridans quadrat")
        
        out_file = StringVar(value="join.html")
        form = Form(root)
        entry = FileEntry(root, dialogtype="tk_getSaveFile",
            variable=out_file)
        form.add_field(entry, text="Output file")
        Checkbutton(root, text="Include common names").grid(
            column=1, sticky=tkinter.W)
        
        Button(root, text="Produce list . . .",
            command=partial(join, ca_file, None)).grid(columnspan=2)
        root.bind("<Return>", partial(join, ca_file))
        
        root.mainloop()
        return

class grid_menu(object):
    def __init__(self, grid, master):
        self.grid = grid
        
        self.dialog = Toplevel(master)
        self.dialog.title("Grid sections")
        self.dialog.bind("<Return>", self.close)
        self.dialog.bind("<Escape>", self.close)
        
        Entry(self.dialog, textvariable=self.grid).pack(fill=tkinter.X)
        
        frame = Frame(self.dialog)
        for column in range(3):
            frame.columnconfigure(column, weight=1)
        
        for row in range(3):
            frame.rowconfigure(row, weight=1)
            
            for (column, name) in enumerate(self.names[row]):
                value = 0o100 << row >> (column * 3)
                command = partial(self.update, value)
                button = Checkbutton(frame, command=command, text=name)
                if int(self.grid.get(), 8) & value:
                    button.state(("selected",))
                button.grid(row=row, column=column,
                    sticky=tkinter.N + tkinter.S + tkinter.E + tkinter.W)
                
                if not int(self.dialog.focus_lastfor()["takefocus"]):
                    button.focus_set()
        
        frame.pack(fill=tkinter.BOTH, expand=True)
        
        button = Button(self.dialog, text="Close", command=self.close)
        button.pack(side=tkinter.BOTTOM)
    
    names = (
        ("M46", "M47", "M48"),
        ("N1", "N2", "N3"),
        ("N10", "N11", "N12"),
    )
    
    def update(self, value):
        current = int(self.grid.get(), 8)
        button = self.dialog.focus_lastfor()
        if button.instate(("selected",)):
            current |= value
        else:
            current &= ~value
        self.grid.set("{:03o}".format(current))
    
    def close(self, *args):
        self.dialog.destroy()

def join(ca_file, _):
    ca_file = ca_file.get()
    
    class Plant(Record):
        def __init__(self):
            Record.__init__(self,
                ca=None,
                evcs=dict(),
                quads=dict(),
            )
    plants = defaultdict(Plant)
    
    if ca_file is not None:
        CaPlant = namedtuple("CaPlant",
            "name, ex, common, family, fam_com, group, area, grid, note")
        with open(ca_file, newline="") as file:
            for plant in csv.reader(file):
                if plant[0].startswith("\x1A"):
                    break
                
                plant = CaPlant._make(plant)
                
                if (not plant.grid or plant.ex in tuple("*+") or
                plant.group == "f" or
                plant.family in ("Orchidaceae", "Loranthaceae")):
                    continue
                
                plants[plant.name].ca = plant
    
    if freq_file is not None:
        DIV_FERN = "2"
        DIV_MOSS = "5"
        FAM_MISTLETOE = "124"
        FAM_ORCHID = "124"
        
        max_freq = dict()
        
        with open(freq_file, newline="") as file:
            for plant in csv.DictReader(file):
                for key in EVC_KEYS:
                    evc = plant[key]
                    if evc not in evcs:
                        continue
                    
                    freq = int(plant["Frequency"])
                    try:
                        max = max_freq[evc]
                    except LookupError:
                        max_freq[evc] = freq
                    else:
                        if freq > max:
                            max_freq[evc] = freq
                    
                    if (plant["ORIGIN"] == "*" or
                    plant["DIVISION"] in (DIV_FERN, DIV_MOSS) or
                    plant["FAMILYNO"] in (FAM_ORCHID, FAM_MISTLETOE)):
                        continue
                    
                    plant["Frequency"] = freq
                    plants[plant["NAME"]].evcs[evc] = plant
    
    ViridansPlant = namedtuple("ViridansPlant",
        "arots, vrots, origin, name, common")
    for quad_file in quads:
        with open(quad_file, newline="") as file:
            file = csv.reader(file)
            next(file)
            group = None
            family = None
            for row in file:
                if row[1] == "t1":
                    (group, _, *_) = row
                    family = None
                    continue
                elif row[1] == "t2":
                    (family, _, *_) = row
                    continue
                
                if (group == "6: Ferns and Fern-like Plants" or
                family in ("Orchidaceae", "Loranthaceae")):
                    continue
                
                plant = ViridansPlant._make(row)
                if plant.origin == "*":
                    continue
                
                plants[plant.name].quads[quad_file] = plant
    
    print("<html><body><table>")
    print("<tr><th>name</th><th>ex</th><th>area</th><th>grid</th>")
    print_tagged("th", evcs)
    print_tagged("th", quads)
    print("</tr>")
    
    for name in sorted(plants.keys()):
        plant = plants[name]
        
        if plant.ca is None:
            plant_ex = ""
            plant_area = ""
            plant_grid = ""
        else:
            plant_ex = plant.ca.ex
            plant_area = "".join(a for a in plant.ca.area if a in area)
            plant_grid = "{:03o}".format(int(plant.ca.grid, 8) & grid)
        
        rel = list()
        thold_met = False
        for evc in evcs:
            try:
                evc_plant = plant.evcs[evc]
            except LookupError:
                rel.append("")
            else:
                freq = evc_plant["Frequency"] / max_freq[evc]
                thold_met = thold_met or freq >= freq_thold
                rel.append("{:.2f}".format(freq))
        
        inquads = tuple(quad in plant.quads for quad in quads)
        
        if not plant_area and not thold_met and not any(inquads):
            continue
        
        print("<tr>")
        print_tagged("td", (name, plant_ex, plant_area, plant_grid))
        print_tagged("td", rel)
        print_tagged("td", ("Y" if q else "" for q in inquads))
        print("</tr>")
    
    print("</table></body></html>")

def print_tagged(tag, list):
    for text in list:
        print("<{tag}>{}</{tag}>".format(saxutils.escape(text), tag=tag))

EVC_KEYS = ("EVC_DESC", "EVC")

def list_evcs(freq_file):
    freq_file = freq_file.get()
    
    with open(freq_file, newline="") as file:
        evcs = set(tuple(row[key] for key in EVC_KEYS)
            for row in csv.DictReader(file))
    
    out = csv.writer(stdout)
    out.writerow(EVC_KEYS)
    out.writerows(sorted(evcs))
    return

def add_file(form, default, **kw):
    field = Frame(form.master)
    file = StringVar(value=default)
    FileEntry(field, dialogtype="tk_getOpenFile", variable=file).pack(
        side=tkinter.LEFT, expand=True, fill=tkinter.X)
    Button(field, text="Delete", command=partial(file.set, "")).pack(
        side=tkinter.LEFT)
    form.add_field(field, **kw)
    return file

class Record(object):
    def __init__(self, *args, **kw):
        self.__dict__.update(*args, **kw)

if __name__ == "__main__":
    main()

#Grid alias incl cmd line
#Fuzzy text matching
#@Ern: Some plants are abbreviated, minor problems worked around; eg:
# Lomandra longifolia ssp longifol.
# Dianella aff longifolia 'Benambra
# Lomandra multiflora ssp multiflor
#How to handle origin, exotic, AROTS, VROTS merging or multiple columns
#How to do Windows python scripts so they are easy to run
#Case-insensitive evc names
#Explicit option to list evcs
#what if evc not found?
